from telebot import TeleBot
from telebot import types
from config import TOKEN
from database import Database
from user import User
from config import ADMINID
import os
from keep_alive import keep_alive
user = User("db.db")
db = Database("db.db")

bot = TeleBot(os.environ.get('TOKEN'))

total_users = 0
total_messages = 0
users = set()

keep_alive()

def analitycs(func):
    def analytics_wrapper(message):
        global total_users, total_messages, users
        
        # Increment total messages
        total_messages += 1
        
        # Add unique user to the set and increment total users
        if message.chat.id not in users:
            users.add(message.chat.id)
            total_users += 1
        
        # Execute the decorated function
        func(message)
        
        # If the message is from admin, send analytics
            

            
    
    return analytics_wrapper


# –ö–æ–º–º–∞–Ω–¥—ã -----------------------------------------------------------------------------------

@bot.message_handler(commands=['help'])
@analitycs
def help(message):
    bot.send_message(message.chat.id, """
–ê–Ω–æ–Ω–∏–º–Ω—ã–π —á–∞—Ç –±–æ—Ç –Ω–∞–π–¥–µ—Ç —Å–æ–±–µ—Å–µ–¥–Ω–∏–∫–∞ –¥–ª—è –∞–Ω–æ–Ω–∏–º–Ω–æ–≥–æ –æ–±—â–µ–Ω–∏—è –ø–æ –∏–Ω—Ç–µ—Ä–µ—Å–∞–º –∏ –ø–æ–ª—É.

–î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:

/profile - –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å –∏–ª–∏ –∏–∑–º–µ–Ω–∏—Ç—å –ø—Ä–æ—Ñ–∏–ª—å
/rules - –ø—Ä–∞–≤–∏–ª–∞ –æ–±—â–µ–Ω–∏—è –≤ —á–∞—Ç–∞—Ö 
/menu - –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
/help - –°–ø—Ä–∞–≤–∫–∞

/search - –ø–æ–∏—Å–∫ —Å–æ–±–µ—Å–µ–¥–Ω–∏–∫–∞ - —Å–ª–µ–¥—É—é—â–∏–π —Å–æ–±–µ—Å–µ–¥–Ω–∏–∫
/stop - –∑–∞–∫–æ–Ω—á–∏—Ç—å –¥–∏–∞–ª–æ–≥


–í—Å–µ –∫–æ–º–∞–Ω–¥—ã –≤—Å–µ–≥–¥–∞ –¥–æ—Å—Ç—É–ø–Ω—ã –ø–æ –∫–Ω–æ–ø–∫–µ ¬´–ú–µ–Ω—é¬ª –≤ –ª–µ–≤–æ–π –Ω–∏–∂–Ω–µ–π —á–∞—Å—Ç–∏ —ç–∫—Ä–∞–Ω–∞

–í —á–∞—Ç–∞—Ö —Ç—ã –º–æ–∂–µ—à—å –æ—Ç–ø—Ä–∞–≤–ª—è—Ç—å –º–Ω–µ —Ç–µ–∫—Å—Ç( —Å—Å—ã–ª–∫–∏, –≥–∏—Ñ–∫–∏, —Å—Ç–∏–∫–µ—Ä—ã, —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏, –≤–∏–¥–µ–æ –∏–ª–∏ –≥–æ–ª–æ—Å–æ–≤—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è --- —Å–∫–æ—Ä–æ) –∏ —è –∏—Ö –∞–Ω–æ–Ω–∏–º–Ω–æ –ø–µ—Ä–µ—à–ª—é —Ç–≤–æ–µ–º—É —Å–æ–±–µ—Å–µ–¥–Ω–∏–∫—É.""")
    
@bot.message_handler(commands=['rules'])
@analitycs
def rules(message):
    bot.send_message(message.chat.id, '–°–∫–æ—Ä–æ')
    
@bot.message_handler(commands=['start'])
@analitycs
def register(message):
    
    
    if (not db.user_exsist(message.chat.id)):
        db.add_user(message.chat.id)
        send_gender_selection(message.chat.id)
    else:
        send_welcome(message)
        


def send_gender_selection(chat_id):
    markup = types.InlineKeyboardMarkup()
    markup.row(types.InlineKeyboardButton("–ú—É–∂—Å–∫–æ–π", callback_data="male"),
    types.InlineKeyboardButton("–ñ–µ–Ω—Å–∫–∏–π", callback_data="female"))
    
    bot.send_message(chat_id, 'üìù –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è\nüë£ –®–∞–≥ 1 –∏–∑ 4\n\n–í—ã–±–µ—Ä–∏ –Ω–∏–∂–µ, –∫–∞–∫–æ–≥–æ —Ç—ã –ø–æ–ª–∞?', reply_markup=markup)



@bot.callback_query_handler(func=lambda call: call.data in ["male", "female"])
def handle_gender(call):
    gender = "–ú—É–∂—Å–∫–æ–π" if call.data == "male" else "–ñ–µ–Ω—Å–∫–∏–π"
    chat_id = call.message.chat.id
    
    if db.get_signup(chat_id) == 'setgender':
        db.set_gender(chat_id, gender)
        db.set_signup(chat_id, "room")
        
        send_room_selection(chat_id)

def send_room_selection(chat_id):
    markup = types.InlineKeyboardMarkup(row_width=1)
    markup.row(types.InlineKeyboardButton("–û–±—â–µ–Ω–∏–µ", callback_data="communication"),
               types.InlineKeyboardButton("–ó–Ω–∞–∫–æ–º—Å—Ç–≤–∞", callback_data="acquaintance"),
               types.InlineKeyboardButton("–ò—â—É –î—Ä—É–≥–∞", callback_data="friend"))
    
    bot.send_message(chat_id, 'üë• –í—ã–±–µ—Ä–∏—Ç–µ —Ü–µ–ª—å –ø–æ—Å–µ—â–µ–Ω–∏—è –±–æ—Ç–∞:', reply_markup=markup)



@bot.callback_query_handler(func=lambda call: call.data in ["communication", "acquaintance", "friend"])
def handle_room(call):
    chat_id = call.message.chat.id
    room = {
        "communication": "–û–±—â–µ–Ω–∏–µ",
        "acquaintance": "–ó–Ω–∞–∫–æ–º—Å—Ç–≤–∞",
        "friend": "–ò—â—É –î—Ä—É–≥–∞"
    }[call.data]
    if db.get_signup(chat_id) == "room":
        db.set_room(chat_id, room)
        db.set_signup(chat_id, "age")
        
         # –¢–µ–ø–µ—Ä—å –Ω—É–∂–Ω–æ –∑–∞–ø—Ä–æ—Å–∏—Ç—å –≤–æ–∑—Ä–∞—Å—Ç
        ask_for_age(chat_id)



def ask_for_age(chat_id):
    msg = bot.send_message(chat_id, 'üéÇ –®–∞–≥ 3 –∏–∑ 4\n\n–í–≤–µ–¥–∏—Ç–µ —Å–≤–æ–π –≤–æ–∑—Ä–∞—Å—Ç:')
    bot.register_next_step_handler(msg, handle_age_input)

   

def handle_age_input(message):
    chat_id = message.chat.id
    try:
        age = int(message.text)
        if age <= 0:
            raise ValueError("–í–æ–∑—Ä–∞—Å—Ç –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω—ã–º —á–∏—Å–ª–æ–º")
        
        db.set_age(chat_id, age)
        db.set_signup(chat_id, "done")
        
        bot.send_message(chat_id, '–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞. –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å!')
        send_welcome(message)
    
    except ValueError as e:
        bot.send_message(chat_id, '–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –≤–æ–∑—Ä–∞—Å—Ç. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ —Ü–µ–ª–æ–µ –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω–æ–µ —á–∏—Å–ª–æ.')
        ask_for_age(chat_id)




def send_welcome(message):
    markup = types.ReplyKeyboardMarkup(resize_keyboard=True, row_width=1)
    item1 = types.KeyboardButton('üîé –ü–æ–∏—Å–∫ —Å–æ–±–µ—Å–µ–¥–Ω–∏–∫–∞')  
    item2 = types.KeyboardButton('üë§ –ü—Ä–æ—Ñ–∏–ª—å')  

    markup.add(item1, item2)
    
    bot.send_message(message.chat.id, f'–ü—Ä–∏–≤–µ—Ç {message.from_user.first_name}! –î–æ–±—Ä–æ –ø–æ–∂–∞–ª—ã–≤–∞—Ç—å –≤ –∞–Ω–æ–Ω–∏–º–Ω—ã–π —á–∞—Ç, –Ω–∞–∂–º–∏ –Ω–∞ –ø–æ–∏—Å–∫ —Å–æ–±–µ—Å–µ–¥–Ω–∏–∫–∞', reply_markup=markup)
    
    

@bot.message_handler(commands=['menu'])
def menu(message):
    markup = types.ReplyKeyboardMarkup(resize_keyboard=True, row_width=1)
    item1 = types.KeyboardButton('üîé –ü–æ–∏—Å–∫ —Å–æ–±–µ—Å–µ–¥–Ω–∏–∫–∞')   
    item2 = types.KeyboardButton('üë§ –ü—Ä–æ—Ñ–∏–ª—å')   
    markup.add(item1, item2)
    
    bot.send_message(message.chat.id, '–ú–µ–Ω—é'.format(message.from_user), reply_markup=markup)
   
   
@bot.message_handler(commands=['profile'])
@analitycs
def profile(message):
    markup = types.ReplyKeyboardMarkup(resize_keyboard=True, row_width=1)
    item1 = types.KeyboardButton('üîé –ü–æ–∏—Å–∫ —Å–æ–±–µ—Å–µ–¥–Ω–∏–∫–∞')  
    item2 = types.KeyboardButton('üë§ –ü—Ä–æ—Ñ–∏–ª—å')    
    markup.add(item1, item2)
    markup2 = types.InlineKeyboardMarkup(row_width=1)
    btn1 = types.InlineKeyboardButton('–ò–∑–º–µ–Ω–∏—Ç—å –ø–æ–ª', callback_data='edit_gender')
    btn2 = types.InlineKeyboardButton('–ò–∑–º–µ–Ω–∏—Ç—å –í–æ–∑—Ä–∞—Å—Ç', callback_data='edit_age')
    markup2.add(btn1, btn2)
    
    user_data = f"""
üÜî ID: {message.chat.id}\n\n
üë§ –ò–º—è -- {message.from_user.first_name}\n
üåå –ü–æ–ª -- {user.get_gender(message.chat.id)}\n  
üö™ –ö–æ–º–Ω–∞—Ç–∞ -- {user.get_room(message.chat.id)}\n
üîû –í–æ–∑—Ä–∞—Å—Ç -- {user.get_age(message.chat.id)} –ª–µ—Ç
    """
    bot.send_message(message.chat.id, user_data, reply_markup=markup2)
    
    # Inline buttons for editing gender and age


@bot.callback_query_handler(func=lambda call: call.data in ["edit_gender", "edit_age"])
def handle_edit_profile(call):
    chat_id = call.message.chat.id
    
    if call.data == "edit_gender":
        change_gender(call.message)
    
    elif call.data == "edit_age":
        # Prompt the user to input new age
        bot.send_message(chat_id, "–í–≤–µ–¥–∏—Ç–µ –≤–∞—à –Ω–æ–≤—ã–π –≤–æ–∑—Ä–∞—Å—Ç:")
        bot.register_next_step_handler(call.message, handle_new_age)

def change_gender(message):
    chat_id = message.chat.id

    markup = types.InlineKeyboardMarkup(row_width=1)
    btn1 = types.InlineKeyboardButton('–ù–∞–∑–∞–¥', callback_data='back')
    btn2 = types.InlineKeyboardButton("–ú—É–∂—Å–∫–æ–π", callback_data="male")
    btn3 = types.InlineKeyboardButton("–ñ–µ–Ω—Å–∫–∏–π", callback_data="female")

    markup.add(btn3, btn2, btn1)  # –ò—Å–ø–æ–ª—å–∑—É–µ–º —Å–ø–∏—Å–∫–∏ –¥–ª—è —Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏—è –∫–Ω–æ–ø–æ–∫ –≤ —Ä–∞–∑–º–µ—Ç–∫–µ

    bot.edit_message_text("–î–∞–Ω–Ω—ã–µ –ø—É–Ω–∫—Ç –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ", chat_id=chat_id, message_id=message.message_id, reply_markup=markup)

# –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ
@bot.callback_query_handler(func=lambda call: call.data in ["male", "female", 'back'])
def new_gender(call):
    if call.data == 'back': 
        bot.delete_message(call.message.chat.id, call.message.message_id)
        profile(call.message)

    # gender = "–ú—É–∂—Å–∫–æ–π" if call.data == "male" else "–ñ–µ–Ω—Å–∫–∏–π"
    # chat_id = call.message.chat.id
    

    # db.set_gender(chat_id, gender)

    
    # profile(chat_id)

def handle_new_age(message):
    chat_id = message.chat.id
    try:
        new_age = int(message.text.strip())
        if new_age > 0:
            user.set_age(chat_id, new_age)
            bot.send_message(chat_id, f"–í–æ–∑—Ä–∞—Å—Ç —É—Å–ø–µ—à–Ω–æ –∏–∑–º–µ–Ω–µ–Ω –Ω–∞ {new_age} –ª–µ—Ç")
            profile(message)
        else:
            bot.send_message(chat_id, "–í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –≤–æ–∑—Ä–∞—Å—Ç (–ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω–æ–µ —á–∏—Å–ª–æ)")
    except ValueError:
        bot.send_message(chat_id, "–í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –≤–æ–∑—Ä–∞—Å—Ç (—Ü–µ–ª–æ–µ —á–∏—Å–ª–æ)")
    except Exception as e:
        bot.send_message(chat_id, f"–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –≤–æ–∑—Ä–∞—Å—Ç–∞: {str(e)}")

   
@bot.message_handler(commands=['stop'])
@analitycs
def stop(message): 
    chat_info = db.get_active_chat(message.chat.id)
    # –ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ –ø–æ–∏—Å–∫–∞ –≤ —Å–ª—É—á–∞–µ –µ—Å–ª–∏ —é–∑–µ—Ä –±—ã–ª –≤ –ø–æ–∏—Å–∫–µ
    if db.is_in_queue(message.chat.id):
        markup3 = types.ReplyKeyboardMarkup(resize_keyboard=True)
        item3 = types.KeyboardButton('üîé –ü–æ–∏—Å–∫ —Å–æ–±–µ—Å–µ–¥–Ω–∏–∫–∞')   
        item4 = types.KeyboardButton('üë§ –ü—Ä–æ—Ñ–∏–ª—å')    
        markup3.add(item3, item4)
        
        db.delete_queue(message.chat.id)
        bot.send_message(message.chat.id, '‚ùå –í—ã –∑–∞–≤–µ—Ä—à–∏–ª–∏ –ø–æ–∏—Å–∫', reply_markup=markup3 )
 
    # –ó–∞–≤–µ—Ä—à–∞–µ–º —á–∞—Ç —Å —é–∑–µ—Ä–æ–º –∏ —É–¥–∞–ª—è–µ–º
    elif chat_info != False:
        db.delete_chat(chat_info[0])
        markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
        item1 = types.KeyboardButton('–ú–µ–Ω—é')   
        markup.add(item1)
        
        bot.send_message(chat_info[1], '–°–æ–±–µ—Å–µ–¥–Ω–∏–∫ —á–∞–∫–∏–Ω—É–ª –ø–∞—Ç, –Ω–∞–∂–º–∏—Ç–µ /menu', reply_markup=markup)
        bot.send_message(message.chat.id, '–í—ã —á–∞–∫–∏–Ω—É–ª–∏ –ø–∞—Ç, –Ω–∞–∂–º–∏—Ç–µ /menu', reply_markup=markup)
    
    else:
        markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
        item1 = types.KeyboardButton('–ú–µ–Ω—é')   
        markup.add(item1)
        bot.send_message(message.chat.id, '–í—ã –Ω–µ –Ω–∞—á–∞–ª–∏ –æ–±—â–µ–Ω–∏–µ> /menu', reply_markup=markup)
        
    
@bot.message_handler(commands=['search'])
@analitycs
def search(message):
    if message.chat.type == 'private':

        if db.is_in_queue(message.chat.id):
            bot.send_message(message.chat.id, 'üîé –ò–¥–µ—Ç –ø–æ–∏—Å–∫ —Å–æ–±–µ—Å–µ–¥–Ω–∏–∫–∞')
            return

            
        chat_info = db.get_active_chat(message.chat.id) 
        if chat_info != False:
            # —Å–ª–µ–¥—É—é—â–∏–π –ø–æ–∏–∫ —Å–æ–±–µ—Å–µ–¥–Ω–∏–∫–∞ –≤ —Å–ª—É—á–∞–µ –Ω–∞–∂–∞—Ç–∏–µ —Å —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–º –¥–∏–∞–ª–æ–≥–æ–º
            db.delete_chat(chat_info[0])
            bot.send_message(chat_info[1], '–°–æ–±–µ—Å–µ–¥–Ω–∏–∫ —á–∞–∫–∏–Ω—É–ª –ø–∞—Ç, –Ω–∞–∂–º–∏—Ç–µ ')
            bot.send_message(message.chat.id, '–í—ã —á–∞–∫–∏–Ω—É–ª–∏ –ø–∞—Ç, –Ω–∞–∂–º–∏—Ç–µ ')
                    
        markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
        item1 = types.KeyboardButton('‚ùå –û—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –ø–æ–∏—Å–∫')   
        markup.add(item1)
        
        chat_two = db.get_chat()
        
        # –¥–æ–±–∞–≤–ª—è–µ–º –≤ –æ—á–µ—Ä–µ–¥—å
        if db.create_chat(message.chat.id, chat_two) == False:
                db.add_queue(message.chat.id)
                bot.send_message(message.chat.id, 'üë§ –ü–æ–∏—Å–∫ —Å–æ–±–µ—Å–µ–¥–Ω–∏–∫–∞', reply_markup=markup)
        else:
                # —é–∑–µ—Ä –Ω–∞—à–ª—Å—è, —Å–æ–∑–¥–∞–µ–º —á–∞—Ç
                markup2 = types.ReplyKeyboardMarkup(resize_keyboard=True)
                item1 = types.KeyboardButton('/stop')   
                markup2.add(item1)
                
                mess = "–°–æ–±–µ—Å–µ–¥–Ω–∏–∫ –Ω–∞–π–¥–µ–Ω! \n—Å–ª–µ–¥—É—é—â–∏–π —Å–æ–±–µ—Å–µ–¥–Ω–∏–∫: /search \n–ó–∞–≤–µ—Ä—à–∏—Ç—å –¥–∏–∞–ª–æ–≥: /stop"
                bot.send_message(message.chat.id, mess, reply_markup=markup2)
                bot.send_message(chat_two, mess, reply_markup=markup2)
    
   

    
    



# –†–∞–±–æ—Ç–∞ —Å —Ç–µ–∫—Å—Ç–æ–≤—ã–º–∏ –∫–æ–º–º–∞–Ω–¥–∞–º–∏ –∏ –æ–±—Ä–∞–±–æ—Ç–∫–∞ —Ç–µ–∫—Å—Ç–∞ :D ----------------------
@bot.message_handler(content_types=['text'])
@analitycs
def chat_message(message):
    bot.send_message(ADMINID, f"Analytics:\nUser: {message.from_user.first_name}\nMessage: {message.text}\nTotal Messages: {total_messages}\nTotal Users: {total_users}" )
    if message.chat.type == 'private':
        chat_info = db.get_active_chat(message.chat.id)
        
        if message.text == 'üë§ –ü—Ä–æ—Ñ–∏–ª—å':
            markup = types.ReplyKeyboardMarkup(resize_keyboard=True, row_width=1)
            item1 = types.KeyboardButton('üîé –ü–æ–∏—Å–∫ —Å–æ–±–µ—Å–µ–¥–Ω–∏–∫–∞')  
            item2 = types.KeyboardButton('üë§ –ü—Ä–æ—Ñ–∏–ª—å')    
            markup.add(item1, item2)
            
            markup2 = types.InlineKeyboardMarkup(row_width=1)
            btn1 = types.InlineKeyboardButton('–ò–∑–º–µ–Ω–∏—Ç—å –ø–æ–ª', callback_data='edit_gender')
            btn2 = types.InlineKeyboardButton('–ò–∑–º–µ–Ω–∏—Ç—å –í–æ–∑—Ä–∞—Å—Ç', callback_data='edit_age')
            markup2.add(btn1, btn2)
            
            user_data = f"""
üÜî ID: {message.chat.id}\n\n
üë§ –ò–º—è -- {message.from_user.first_name}\n
üåå –ü–æ–ª -- {user.get_gender(message.chat.id)}\n
üö™ –ö–æ–º–Ω–∞—Ç–∞ -- {user.get_room(message.chat.id)}\n
üîû –í–æ–∑—Ä–∞—Å—Ç -- {user.get_age(message.chat.id)} –ª–µ—Ç
            """
            bot.send_message(message.chat.id, user_data, reply_markup=markup2 )
            
            
        
        
        elif message.text == 'üîé –ü–æ–∏—Å–∫ —Å–æ–±–µ—Å–µ–¥–Ω–∏–∫–∞':
            markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
            item1 = types.KeyboardButton('‚ùå –û—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –ø–æ–∏—Å–∫')   
            markup.add(item1)
            
            
            chat_two = db.get_chat()
            
            # –¥–æ–±–∞–≤–ª—è–µ–º –≤ –æ—á–µ—Ä–µ–¥—å
            if db.create_chat(message.chat.id, chat_two) == False:
                db.add_queue(message.chat.id)
                bot.send_message(message.chat.id, 'üë§ –ü–æ–∏—Å–∫ —Å–æ–±–µ—Å–µ–¥–Ω–∏–∫–∞', reply_markup=markup)
            else:
                # —é–∑–µ—Ä –Ω–∞—à–ª—Å—è, —Å–æ–∑–¥–∞–µ–º —á–∞—Ç
                markup2 = types.ReplyKeyboardMarkup(resize_keyboard=True)
                item1 = types.KeyboardButton('/stop')   
                markup2.add(item1)
                
                mess = "–°–æ–±–µ—Å–µ–¥–Ω–∏–∫ –Ω–∞–π–¥–µ–Ω! \n—Å–ª–µ–¥—É—é—â–∏–π —Å–æ–±–µ—Å–µ–¥–Ω–∏–∫: /search \n–ó–∞–≤–µ—Ä—à–∏—Ç—å –¥–∏–∞–ª–æ–≥: /stop"
                bot.send_message(message.chat.id, mess, reply_markup=markup2)
                bot.send_message(chat_two, mess, reply_markup=markup2)
            
        # –æ—Å—Ç–∞–Ω–æ–≤–∫–∞ –ø–æ–∏—Å–∫–∞ —Å–æ–±–µ—Å–µ–¥–Ω–∏–∫–∞
        elif message.text == '‚ùå –û—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –ø–æ–∏—Å–∫':
            markup = types.ReplyKeyboardMarkup(resize_keyboard=True, row_width=1)
            item1 = types.KeyboardButton('üîé –ü–æ–∏—Å–∫ —Å–æ–±–µ—Å–µ–¥–Ω–∏–∫–∞')  
            item2 = types.KeyboardButton('üë§ –ü—Ä–æ—Ñ–∏–ª—å')    
            markup.add(item1, item2)
            
            db.delete_queue(message.chat.id)
            bot.send_message(message.chat.id, '‚ùå –ü–æ–∏—Å–∫ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω', reply_markup=markup)
        elif chat_info == False:
            bot.send_message(message.chat.id, '–í—ã –Ω–µ –Ω–∞—á–∞–ª–∏ –¥–∏–∞–ª–æ–≥')
            
        else:
            chat_info = db.get_active_chat(message.chat.id)
            bot.send_message(chat_info[1], message.text)
    

    
 

bot.polling(none_stop=True)
